#include <cstdio>#include <cstdlib>#include <netdb.h>#include <cstring>#include <unistd.h>#include <errno.h>#include <time.h>static const int BUFFER_SIZE = 256;int main(int argvs, char **argv) {    if (argvs < 3) {        printf("usage <ip> <port>\n");        exit(0);    }    int port = atoi(argv[2]);    int sock = socket(AF_INET, SOCK_STREAM, 0);    if (sock < 0) {        printf("socket() failed: %d", errno);        return EXIT_FAILURE;    }    hostent *server = gethostbyname(argv[1]);    if (server == NULL) {        printf("Host not found\n");        return EXIT_FAILURE;    }    sockaddr_in serv_addr;    memset(&serv_addr, 0, sizeof(serv_addr));    serv_addr.sin_family = AF_INET;    strncpy((char *) &serv_addr.sin_addr.s_addr, server->h_addr, server->h_length);    serv_addr.sin_port = htons(port);    if (connect(sock, (sockaddr *) &serv_addr, sizeof(serv_addr))) {        printf("connect() failed: %d", errno);        return EXIT_FAILURE;    } else {        printf("connect is accepted\n");    }    char *message = new char[BUFFER_SIZE + 1];    memset(message, 0, BUFFER_SIZE + 1);    if (argvs < 4) {        char *string = "message from client\n";        strncpy(message, string, strlen(string));    } else {        int messageSize = strlen(argv[3]);        strncpy(message, argv[3], messageSize);        message[messageSize] = '\n';    }    srand(clock());    sleep(rand() % 8 + 2);    printf("send message\n");    write(sock, message, strlen(message));    read(sock, message, BUFFER_SIZE);    printf("[message] %s\n", message);    sleep(rand() % 8 + 2);    close(sock);    return 0;}